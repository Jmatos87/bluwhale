{"version":3,"sources":["logo.svg","components/ChartComponent/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Chart","props","array","data","formattedData","x","map","item","y","useState","customizeOpen","toggleCustomizeOpen","customWidth","changeWidth","customHeight","changeHeight","customChartType","changeChartType","customChartColor","changeColorChart","widthError","toggleWidthError","heightError","toggleHeightError","width","height","chartType","chartColor","finalSettings","changeSettings","options","title","text","chart","type","backgroundColor","xAxis","categories","series","responsive","credits","enabled","Card","className","highcharts","Highcharts","Button","onClick","error","isNaN","parseInt","color","variant","TextField","value","helperText","id","label","onChange","evt","userInput","target","InputLabel","shrink","Select","labelId","MenuItem","name","myData2","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.0f2d9805.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useState, Fragment} from 'react'\r\nimport Highcharts from 'highcharts'\r\nimport HighchartsReact from 'highcharts-react-official'\r\nimport Card from '@material-ui/core/Card';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\n\r\nimport './Chart.css'\r\n\r\nconst formatData = (array) => {\r\n    return {\r\n        x: array.map(item => {\r\n            return item.x\r\n        }),\r\n        y: array.map(item => {\r\n            return item.y\r\n        })\r\n    }\r\n}\r\n\r\n\r\nconst Chart = (props) => {\r\n    const { data } = props\r\n    const formattedData = formatData(data)\r\n    const [customizeOpen, toggleCustomizeOpen] = useState(false);\r\n    const [customWidth, changeWidth] = useState(500);\r\n    const [customHeight, changeHeight ] = useState(400);\r\n    const [customChartType, changeChartType ] = useState(0);\r\n    const [customChartColor, changeColorChart ] = useState('#FFFFFF');\r\n    const [widthError, toggleWidthError ] = useState(false);\r\n    const [heightError, toggleHeightError ] = useState(false);\r\n    const [finalSettings, changeSettings ] = useState({\r\n        width: 500,\r\n        height: 400,\r\n        chartType: 0,\r\n        chartColor: '#FFFFFF'\r\n    })\r\n    const { chartColor, chartType, height, width } = finalSettings\r\n    const options = {\r\n        title: {\r\n            text: 'Test'\r\n        },\r\n        chart:{\r\n            height, \r\n            width,\r\n            type: chartType === 0 ? 'line' : 'bar',\r\n            backgroundColor: chartColor\r\n        },\r\n        xAxis: {\r\n            categories: formattedData.x\r\n        },\r\n        series: [{\r\n            data: formattedData.y\r\n        }],\r\n        responsive: true,\r\n        credits: {\r\n            enabled: false\r\n        },\r\n    }\r\n    return (\r\n        <div>\r\n            <Card className='card-styling' >\r\n                <HighchartsReact\r\n                    highcharts={Highcharts}\r\n                    options={options}\r\n                />\r\n                <Button \r\n                    onClick={() => { \r\n                        let error = false\r\n                        if(customizeOpen){\r\n                            if(isNaN(customWidth)){\r\n                                error = true\r\n                                toggleWidthError(true)\r\n                            }else{\r\n                                toggleWidthError(false)\r\n                            }\r\n                            if(isNaN(customHeight)){\r\n                                error = true\r\n                                toggleHeightError(true)\r\n                            }else{\r\n                                toggleHeightError(false)\r\n                            }\r\n                            if(!error){\r\n                                toggleCustomizeOpen(!customizeOpen)\r\n                                changeSettings({\r\n                                    width: parseInt(customWidth),\r\n                                    height: parseInt(customHeight),\r\n                                    chartType: customChartType,\r\n                                    chartColor: customChartColor\r\n                                })\r\n                            }\r\n                        }else{\r\n                            toggleCustomizeOpen(!customizeOpen)\r\n                        }\r\n                    }} \r\n                    color={customizeOpen ? 'primary' : 'secondary'} variant=\"contained\"\r\n                >\r\n                    {customizeOpen ? 'Apply Changes' : 'Customize'}\r\n                </Button>\r\n                {customizeOpen && (\r\n                    <Button className='cancel-button' onClick={() => { \r\n                        toggleCustomizeOpen(!customizeOpen)\r\n                        }} \r\n                        color='default' variant=\"contained\"\r\n                    >\r\n                        Cancel\r\n                    </Button>\r\n                )}\r\n                {customizeOpen && (\r\n                    <Fragment>\r\n                        <div className='text-center my-3'>\r\n                            <h4>Form Options</h4>\r\n                        </div>\r\n                        <div className='row my-4'>\r\n                            <div className='col-lg-6'>\r\n                                <TextField \r\n                                    value={customWidth} \r\n                                    error={widthError}\r\n                                    helperText='Numbers only please' \r\n                                    id=\"standard-basic\" \r\n                                    label=\"Width\" \r\n                                    onChange={evt =>{\r\n                                        const userInput = evt.target.value\r\n                                        changeWidth(userInput)\r\n                                    }}  \r\n                                />\r\n                            </div>\r\n                            <div className='col-lg-6'>\r\n                                <TextField \r\n                                    value={customHeight} \r\n                                    error={heightError}\r\n                                    helperText='Numbers only please'  \r\n                                    id=\"standard-basic\" \r\n                                    label=\"Height\" \r\n                                    onChange={evt =>{\r\n                                        const userInput = evt.target.value\r\n                                        changeHeight(userInput)\r\n                                    }} \r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div className='row my-4'>\r\n                            <div className='col-lg-6'>\r\n                                <InputLabel shrink id=\"demo-simple-select-placeholder-label-label\">\r\n                                Chart Type\r\n                                </InputLabel>\r\n                                <Select\r\n                                    labelId=\"demo-simple-select-placeholder-label-label\"\r\n                                    id=\"demo-simple-select-placeholder-label\"\r\n                                    value={customChartType}\r\n                                    onChange={evt => {\r\n                                        const userInput = evt.target.value\r\n                                        changeChartType(userInput)\r\n                                    }}\r\n                                >\r\n                                    <MenuItem value={0}>Line Chart</MenuItem>\r\n                                    <MenuItem value={1}>Bar Chart</MenuItem>\r\n                                </Select>\r\n                            </div>\r\n                            <div className='col-lg-6'>\r\n                                <InputLabel shrink id=\"demo-simple-select-placeholder-label-label\">\r\n                                Chart Color\r\n                                </InputLabel>\r\n                                <input \r\n                                    type=\"color\" \r\n                                    id=\"favcolor\" \r\n                                    name=\"favcolor\" \r\n                                    value={customChartColor}\r\n                                    onChange={evt => {\r\n                                        const userInput = evt.target.value\r\n                                        changeColorChart(userInput)\r\n                                    }}    \r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </Fragment>\r\n                )}\r\n            </Card>\r\n        </div>\r\n    )\r\n} \r\n\r\nexport default Chart","import React from 'react';\nimport logo from './logo.svg';\nimport Chart from './components/ChartComponent'\nimport './App.css';\n\nconst myData1 = [\n  { x: 0, y: 10 },\n  { x: 1, y: 20 },\n  { x: 2, y: 40 },\n  { x: 3, y: 20 },\n  { x: 4, y: 10 }\n];\n\nconst myData2 = [\n  { x: \"USA\", y: 193 },\n  { x: \"Canada\", y: 46 },\n  { x: \"UK\", y: 320 },\n  { x: \"China\", y: 341 },\n  { x: \"South Africa\", y: 88 }\n];\n\nfunction App() {\n\n  return (\n    <div className=\"container bg\">\n      <div className='row text-center header-styling'>\n        <h1 className='col'>Chart it out!</h1>\n      </div>\n      <div className='row'>\n        <Chart data={myData2}/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}